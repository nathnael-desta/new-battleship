// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
"use strict";
var commandlinker_1 = require("../commandlinker");
var commandpalette_1 = require("../commandpalette");
var console_1 = require("../console");
var filebrowser_1 = require("../filebrowser");
var instancerestorer_1 = require("../instancerestorer");
var filebrowser_2 = require("../filebrowser");
var services_1 = require("../services");
var terminal_1 = require("../terminal");
var _1 = require("./");
/**
 * A service providing an interface to the the launcher.
 */
var plugin = {
    activate: activate,
    id: 'jupyter.services.launcher',
    requires: [
        services_1.IServiceManager,
        filebrowser_2.IPathTracker,
        commandpalette_1.ICommandPalette,
        commandlinker_1.ICommandLinker,
        instancerestorer_1.IInstanceRestorer
    ],
    provides: _1.ILauncher,
    autoStart: true
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Export the plugin as default.
 */
exports.default = plugin;
/**
 * Activate the launcher.
 */
function activate(app, services, pathTracker, palette, linker, restorer) {
    var model = new _1.LauncherModel();
    // Set launcher path and track the path as it changes.
    model.path = pathTracker.path;
    pathTracker.pathChanged.connect(function () { model.path = pathTracker.path; });
    var widget = new _1.LauncherWidget({ linker: linker });
    widget.model = model;
    widget.id = 'launcher';
    widget.title.label = 'Launcher';
    // Let the application restorer track the launcher for restoration of
    // application state (e.g. setting the launcher as the current side bar
    // widget).
    restorer.add(widget, 'launcher');
    // Hardcoded defaults.
    var defaults = [
        {
            name: 'Notebook',
            command: filebrowser_1.CommandIDs.newNotebook
        },
        {
            name: 'Code Console',
            command: console_1.CommandIDs.create
        },
        {
            name: 'Text Editor',
            command: filebrowser_1.CommandIDs.newTextFile
        }
    ];
    if (services.terminals.isAvailable()) {
        defaults.push({
            name: 'Terminal',
            command: terminal_1.CommandIDs.createNew
        });
    }
    // Note: we do not retain a handle on the items added by default, which
    // means we have to way of removing them after the fact.
    defaults.forEach(function (options) { model.add(options); });
    app.commands.addCommand(_1.CommandIDs.show, {
        label: 'Show Launcher',
        execute: function () {
            if (!widget.isAttached) {
                app.shell.addToLeftArea(widget);
            }
            app.shell.activateLeft(widget.id);
        }
    });
    palette.addItem({ command: _1.CommandIDs.show, category: 'Help' });
    app.shell.addToLeftArea(widget);
    return model;
}
//# sourceMappingURL=plugin.js.map