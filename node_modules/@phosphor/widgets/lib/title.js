"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*-----------------------------------------------------------------------------
| Copyright (c) 2014-2017, PhosphorJS Contributors
|
| Distributed under the terms of the BSD 3-Clause License.
|
| The full license is in the file LICENSE, distributed with this software.
|----------------------------------------------------------------------------*/
var signaling_1 = require("@phosphor/signaling");
/**
 * An object which holds data related to an object's title.
 *
 * #### Notes
 * A title object is intended to hold the data necessary to display a
 * header for a particular object. A common example is the `TabPanel`,
 * which uses the widget title to populate the tab for a child widget.
 */
var Title = (function () {
    /**
     * Construct a new title.
     *
     * @param options - The options for initializing the title.
     */
    function Title(options) {
        this._icon = '';
        this._label = '';
        this._caption = '';
        this._mnemonic = -1;
        this._className = '';
        this._closable = false;
        this._changed = new signaling_1.Signal(this);
        this._dataset = Object.create(null);
        this.owner = options.owner;
        if (options.label !== undefined) {
            this._label = options.label;
        }
        if (options.mnemonic !== undefined) {
            this._mnemonic = options.mnemonic;
        }
        if (options.icon !== undefined) {
            this._icon = options.icon;
        }
        if (options.caption !== undefined) {
            this._caption = options.caption;
        }
        if (options.className !== undefined) {
            this._className = options.className;
        }
        if (options.closable !== undefined) {
            this._closable = options.closable;
        }
        if (options.dataset !== undefined) {
            Private.updateData(this._dataset, options.dataset);
        }
    }
    Object.defineProperty(Title.prototype, "changed", {
        /**
         * A signal emitted when the state of the title changes.
         */
        get: function () {
            return this._changed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Title.prototype, "label", {
        /**
         * Get the label for the title.
         *
         * #### Notes
         * The default value is an empty string.
         */
        get: function () {
            return this._label;
        },
        /**
         * Set the label for the title.
         */
        set: function (value) {
            if (this._label === value) {
                return;
            }
            this._label = value;
            this._changed.emit(undefined);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Title.prototype, "mnemonic", {
        /**
         * Get the mnemonic index for the title.
         *
         * #### Notes
         * The default value is `-1`.
         */
        get: function () {
            return this._mnemonic;
        },
        /**
         * Set the mnemonic index for the title.
         */
        set: function (value) {
            if (this._mnemonic === value) {
                return;
            }
            this._mnemonic = value;
            this._changed.emit(undefined);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Title.prototype, "icon", {
        /**
         * Get the icon class name for the title.
         *
         * #### Notes
         * The default value is an empty string.
         */
        get: function () {
            return this._icon;
        },
        /**
         * Set the icon class name for the title.
         *
         * #### Notes
         * Multiple class names can be separated with whitespace.
         */
        set: function (value) {
            if (this._icon === value) {
                return;
            }
            this._icon = value;
            this._changed.emit(undefined);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Title.prototype, "caption", {
        /**
         * Get the caption for the title.
         *
         * #### Notes
         * The default value is an empty string.
         */
        get: function () {
            return this._caption;
        },
        /**
         * Set the caption for the title.
         */
        set: function (value) {
            if (this._caption === value) {
                return;
            }
            this._caption = value;
            this._changed.emit(undefined);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Title.prototype, "className", {
        /**
         * Get the extra class name for the title.
         *
         * #### Notes
         * The default value is an empty string.
         */
        get: function () {
            return this._className;
        },
        /**
         * Set the extra class name for the title.
         *
         * #### Notes
         * Multiple class names can be separated with whitespace.
         */
        set: function (value) {
            if (this._className === value) {
                return;
            }
            this._className = value;
            this._changed.emit(undefined);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Title.prototype, "closable", {
        /**
         * Get the closable state for the title.
         *
         * #### Notes
         * The default value is `false`.
         */
        get: function () {
            return this._closable;
        },
        /**
         * Set the closable state for the title.
         *
         * #### Notes
         * This controls the presence of a close icon when applicable.
         */
        set: function (value) {
            if (this._closable === value) {
                return;
            }
            this._closable = value;
            this._changed.emit(undefined);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get the data value for a data key.
     *
     * @param key - The data key of interest.
     *
     * @returns The value for the given key, or an empty string.
     *
     * #### Notes
     * The dataset is intended for advanced use cases where the other
     * properties on the title are insufficient to contain all of the
     * data needed to render the title for an object.
     */
    Title.prototype.getData = function (key) {
        return Private.getData(this._dataset, key);
    };
    /**
     * Set the data value for a data key.
     *
     * @param key - The data key of interest.
     *
     * @param value - The value to set for the data key.
     *
     * #### Notes
     * The dataset is intended for advanced use cases where the other
     * properties on the title are insufficient to contain all of the
     * data needed to render the title for an object.
     */
    Title.prototype.setData = function (key, value) {
        if (Private.setData(this._dataset, key, value)) {
            this._changed.emit(undefined);
        }
    };
    /**
     * Update the data values for multiple data keys.
     *
     * @param value - An object mapping of key/value pairs to update.
     *
     * #### Notes
     * The dataset is intended for advanced use cases where the other
     * properties on the title are insufficient to contain all of the
     * data needed to render the title for an object.
     */
    Title.prototype.updateData = function (values) {
        if (Private.updateData(this._dataset, values)) {
            this._changed.emit(undefined);
        }
    };
    return Title;
}());
exports.Title = Title;
/**
 * The namespace for the module implementation details.
 */
var Private;
(function (Private) {
    /**
     * Get the value for a dataset key.
     *
     * Returns an empty string if the key does not exist.
     */
    function getData(dataset, key) {
        return dataset[key] || '';
    }
    Private.getData = getData;
    /**
     * Set the value for a dataset key.
     *
     * Returns whether the value was changed.
     */
    function setData(dataset, key, value) {
        if (value === (dataset[key] || '')) {
            return false;
        }
        if (value) {
            dataset[key] = value;
        }
        else {
            delete dataset[key];
        }
        return true;
    }
    Private.setData = setData;
    /**
     * Update the values for a dataset.
     *
     * Returns whether any value was changed.
     */
    function updateData(dataset, values) {
        var changed = false;
        for (var key in values) {
            if (values[key] === (dataset[key] || '')) {
                continue;
            }
            if (values[key]) {
                dataset[key] = values[key];
            }
            else {
                delete dataset[key];
            }
            changed = true;
        }
        return changed;
    }
    Private.updateData = updateData;
})(Private || (Private = {}));
