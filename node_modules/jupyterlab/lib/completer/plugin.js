// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
"use strict";
var widgets_1 = require("@phosphor/widgets");
var console_1 = require("../console");
var notebook_1 = require("../notebook");
var _1 = require("./");
/**
 * A service providing code completion for editors.
 */
var service = {
    id: 'jupyter.services.completer',
    autoStart: true,
    provides: _1.ICompletionManager,
    activate: function (app) {
        var handlers = {};
        app.commands.addCommand(_1.CommandIDs.invoke, {
            execute: function (args) {
                var id = args && args['id'];
                if (!id) {
                    return;
                }
                var handler = handlers[id];
                if (handler) {
                    handler.invoke();
                }
            }
        });
        app.commands.addCommand(_1.CommandIDs.select, {
            execute: function (args) {
                var id = args && args['id'];
                if (!id) {
                    return;
                }
                var handler = handlers[id];
                if (handler) {
                    handler.completer.selectActive();
                }
            }
        });
        return {
            register: function (completable) {
                var anchor = completable.anchor, editor = completable.editor, kernel = completable.kernel, parent = completable.parent;
                var model = new _1.CompleterModel();
                var completer = new _1.CompleterWidget({ anchor: anchor, model: model });
                var handler = new _1.CompletionHandler({ completer: completer, kernel: kernel });
                var id = parent.id;
                // Associate the handler with the parent widget.
                handlers[id] = handler;
                // Set the handler's editor.
                handler.editor = editor;
                // Attach the completer widget.
                widgets_1.Widget.attach(completer, document.body);
                // Listen for parent disposal.
                parent.disposed.connect(function () {
                    delete handlers[id];
                    model.dispose();
                    completer.dispose();
                    handler.dispose();
                });
                return handler;
            }
        };
    }
};
/**
 * An extension that registers consoles for code completion.
 */
var consolePlugin = {
    id: 'jupyter.extensions.console-completer',
    requires: [_1.ICompletionManager, console_1.IConsoleTracker],
    autoStart: true,
    activate: function (app, manager, consoles) {
        // Create a handler for each console that is created.
        consoles.widgetAdded.connect(function (sender, panel) {
            var anchor = panel.console;
            var cell = anchor.prompt;
            var editor = cell && cell.editor;
            var kernel = anchor.session.kernel;
            var parent = panel;
            var handler = manager.register({ anchor: anchor, editor: editor, kernel: kernel, parent: parent });
            // Listen for prompt creation.
            anchor.promptCreated.connect(function (sender, cell) {
                handler.editor = cell && cell.editor;
            });
            // Listen for kernel changes.
            anchor.session.kernelChanged.connect(function (sender, kernel) {
                handler.kernel = kernel;
            });
        });
        // Add console completer invoke command.
        app.commands.addCommand(_1.CommandIDs.invokeConsole, {
            execute: function () {
                var id = consoles.currentWidget && consoles.currentWidget.id;
                if (!id) {
                    return;
                }
                return app.commands.execute(_1.CommandIDs.invoke, { id: id });
            }
        });
        // Add console completer select command.
        app.commands.addCommand(_1.CommandIDs.selectConsole, {
            execute: function () {
                var id = consoles.currentWidget && consoles.currentWidget.id;
                if (!id) {
                    return;
                }
                return app.commands.execute(_1.CommandIDs.select, { id: id });
            }
        });
        // Set enter key for console completer select command.
        app.commands.addKeyBinding({
            command: _1.CommandIDs.selectConsole,
            keys: ['Enter'],
            selector: ".jp-ConsolePanel ." + _1.COMPLETER_ACTIVE_CLASS
        });
    }
};
/**
 * An extension that registers notebooks for code completion.
 */
var notebookPlugin = {
    id: 'jupyter.extensions.notebook-completer',
    requires: [_1.ICompletionManager, notebook_1.INotebookTracker],
    autoStart: true,
    activate: function (app, manager, notebooks) {
        // Create a handler for each notebook that is created.
        notebooks.widgetAdded.connect(function (sender, panel) {
            var anchor = panel.notebook;
            var cell = panel.notebook.activeCell;
            var editor = cell && cell.editor;
            var kernel = panel.kernel;
            var parent = panel;
            var handler = manager.register({ anchor: anchor, editor: editor, kernel: kernel, parent: parent });
            // Listen for active cell changes.
            panel.notebook.activeCellChanged.connect(function (sender, cell) {
                handler.editor = cell && cell.editor;
            });
            // Listen for kernel changes.
            panel.kernelChanged.connect(function (sender, kernel) {
                handler.kernel = kernel;
            });
        });
        // Add notebook completer command.
        app.commands.addCommand(_1.CommandIDs.invokeNotebook, {
            execute: function () {
                var id = notebooks.currentWidget && notebooks.currentWidget.id;
                return app.commands.execute(_1.CommandIDs.invoke, { id: id });
            }
        });
        // Add notebook completer select command.
        app.commands.addCommand(_1.CommandIDs.selectNotebook, {
            execute: function () {
                var id = notebooks.currentWidget && notebooks.currentWidget.id;
                if (!id) {
                    return;
                }
                return app.commands.execute(_1.CommandIDs.select, { id: id });
            }
        });
        // Set enter key for notebook completer select command.
        app.commands.addKeyBinding({
            command: _1.CommandIDs.selectNotebook,
            keys: ['Enter'],
            selector: ".jp-Notebook ." + _1.COMPLETER_ACTIVE_CLASS
        });
    }
};
/**
 * Export the plugins as default.
 */
var plugins = [
    service, consolePlugin, notebookPlugin
];
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = plugins;
//# sourceMappingURL=plugin.js.map