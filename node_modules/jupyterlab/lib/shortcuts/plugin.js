// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
"use strict";
var application_1 = require("../application");
var commandpalette_1 = require("../commandpalette");
var completer_1 = require("../completer");
var console_1 = require("../console");
var editorwidget_1 = require("../editorwidget");
var filebrowser_1 = require("../filebrowser");
var help_1 = require("../help");
var imagewidget_1 = require("../imagewidget");
var inspector_1 = require("../inspector");
var notebook_1 = require("../notebook");
var tooltip_1 = require("../tooltip");
/**
 * The list of default application shortcuts.
 *
 * #### Notes
 * When setting shortcut selectors, there are two concepts to consider:
 * specificity and matchability. These two interact in sometimes
 * counterintuitive ways. Keyboard events are triggered from an element and
 * they propagate up the DOM until they reach the `documentElement` (`<body>`).
 *
 * When a registered shortcut sequence is fired, the shortcut manager checks
 * the node that fired the event and each of its ancestors until a node matches
 * one or more registered selectors. The *first* matching selector in the
 * chain of ancestors will invoke the shortcut handler and the traversal will
 * end at that point. If a node matches more than one selector, the handler for
 * whichever selector is more *specific* fires.
 * @see https://www.w3.org/TR/css3-selectors/#specificity
 *
 * The practical consequence of this is that a very broadly matching selector,
 * e.g. `'*'` or `'div'` may match and therefore invoke a handler *before* a
 * more specific selector. The most common pitfall is to use the universal
 * (`'*'`) selector. For almost any use case where a global keyboard shortcut is
 * required, using the `'body'` selector is more appropriate.
 */
var SHORTCUTS = [
    {
        command: application_1.CommandIDs.activateNextTab,
        selector: 'body',
        keys: ['Ctrl Shift ]']
    },
    {
        command: application_1.CommandIDs.activatePreviousTab,
        selector: 'body',
        keys: ['Ctrl Shift [']
    },
    {
        command: commandpalette_1.CommandIDs.activate,
        selector: 'body',
        keys: ['Accel Shift P']
    },
    {
        command: completer_1.CommandIDs.invokeConsole,
        selector: ".jp-ConsolePanel ." + completer_1.COMPLETABLE_CLASS,
        keys: ['Tab']
    },
    {
        command: completer_1.CommandIDs.invokeNotebook,
        selector: ".jp-Notebook ." + completer_1.COMPLETABLE_CLASS,
        keys: ['Tab']
    },
    {
        command: console_1.CommandIDs.run,
        selector: '.jp-CodeConsole-prompt',
        keys: ['Enter']
    },
    {
        command: console_1.CommandIDs.runForced,
        selector: '.jp-CodeConsole-prompt',
        keys: ['Shift Enter']
    },
    {
        command: console_1.CommandIDs.linebreak,
        selector: '.jp-CodeConsole-prompt',
        keys: ['Ctrl Enter']
    },
    {
        command: editorwidget_1.CommandIDs.runCode,
        selector: '.jp-EditorWidget',
        keys: ['Shift Enter']
    },
    {
        command: filebrowser_1.CommandIDs.toggleBrowser,
        selector: 'body',
        keys: ['Accel Shift F']
    },
    {
        command: filebrowser_1.CommandIDs.newTextFile,
        selector: 'body',
        keys: ['Ctrl O']
    },
    {
        command: filebrowser_1.CommandIDs.newNotebook,
        selector: 'body',
        keys: ['Ctrl Shift N']
    },
    {
        command: filebrowser_1.CommandIDs.save,
        selector: '.jp-Document',
        keys: ['Accel S']
    },
    {
        command: filebrowser_1.CommandIDs.close,
        selector: '.jp-Document',
        keys: ['Ctrl Q']
    },
    {
        command: filebrowser_1.CommandIDs.closeAllFiles,
        selector: '.jp-Document',
        keys: ['Ctrl Shift Q']
    },
    {
        command: help_1.CommandIDs.toggle,
        selector: 'body',
        keys: ['Accel Shift H']
    },
    {
        command: imagewidget_1.CommandIDs.zoomIn,
        selector: '.jp-ImageWidget',
        keys: ['=']
    },
    {
        command: imagewidget_1.CommandIDs.zoomOut,
        selector: '.jp-ImageWidget',
        keys: ['-']
    },
    {
        command: imagewidget_1.CommandIDs.resetZoom,
        selector: '.jp-ImageWidget',
        keys: ['0']
    },
    {
        command: inspector_1.CommandIDs.open,
        selector: '.jp-CodeConsole-prompt',
        keys: ['Accel I']
    },
    {
        command: notebook_1.CommandIDs.runAndAdvance,
        selector: '.jp-Notebook',
        keys: ['Shift Enter']
    },
    {
        command: notebook_1.CommandIDs.runAndInsert,
        selector: '.jp-Notebook',
        keys: ['Alt Enter']
    },
    {
        command: notebook_1.CommandIDs.run,
        selector: '.jp-Notebook',
        keys: ['Ctrl Enter']
    },
    {
        command: notebook_1.CommandIDs.interrupt,
        selector: '.jp-Notebook.jp-mod-commandMode:focus',
        keys: ['I', 'I']
    },
    {
        command: notebook_1.CommandIDs.restart,
        selector: '.jp-Notebook.jp-mod-commandMode:focus',
        keys: ['0', '0']
    },
    {
        command: notebook_1.CommandIDs.toCode,
        selector: '.jp-Notebook.jp-mod-commandMode:focus',
        keys: ['Y']
    },
    {
        command: notebook_1.CommandIDs.toMarkdown,
        selector: '.jp-Notebook.jp-mod-commandMode:focus',
        keys: ['M']
    },
    {
        command: notebook_1.CommandIDs.toRaw,
        selector: '.jp-Notebook.jp-mod-commandMode:focus',
        keys: ['R']
    },
    {
        command: notebook_1.CommandIDs.deleteCell,
        selector: '.jp-Notebook.jp-mod-commandMode:focus',
        keys: ['D', 'D'],
    },
    {
        command: notebook_1.CommandIDs.split,
        selector: '.jp-Notebook.jp-mod-editMode',
        keys: ['Ctrl Shift -'],
    },
    {
        command: notebook_1.CommandIDs.merge,
        selector: '.jp-Notebook.jp-mod-commandMode:focus',
        keys: ['Shift M'],
    },
    {
        command: notebook_1.CommandIDs.selectAbove,
        selector: '.jp-Notebook.jp-mod-commandMode:focus',
        keys: ['ArrowUp'],
    },
    {
        command: notebook_1.CommandIDs.selectAbove,
        selector: '.jp-Notebook.jp-mod-commandMode:focus',
        keys: ['K'],
    },
    {
        command: notebook_1.CommandIDs.selectBelow,
        selector: '.jp-Notebook.jp-mod-commandMode:focus',
        keys: ['ArrowDown'],
    },
    {
        command: notebook_1.CommandIDs.selectBelow,
        selector: '.jp-Notebook.jp-mod-commandMode:focus',
        keys: ['J'],
    },
    {
        command: notebook_1.CommandIDs.extendAbove,
        selector: '.jp-Notebook.jp-mod-commandMode:focus',
        keys: ['Shift ArrowUp'],
    },
    {
        command: notebook_1.CommandIDs.extendAbove,
        selector: '.jp-Notebook.jp-mod-commandMode:focus',
        keys: ['Shift K'],
    },
    {
        command: notebook_1.CommandIDs.extendBelow,
        selector: '.jp-Notebook.jp-mod-commandMode:focus',
        keys: ['Shift ArrowDown'],
    },
    {
        command: notebook_1.CommandIDs.extendBelow,
        selector: '.jp-Notebook.jp-mod-commandMode:focus',
        keys: ['Shift J'],
    },
    {
        command: notebook_1.CommandIDs.undo,
        selector: '.jp-Notebook.jp-mod-commandMode:focus',
        keys: ['Z'],
    },
    {
        command: notebook_1.CommandIDs.redo,
        selector: '.jp-Notebook.jp-mod-commandMode:focus',
        keys: ['Shift Z'],
    },
    {
        command: notebook_1.CommandIDs.cut,
        selector: '.jp-Notebook.jp-mod-commandMode:focus',
        keys: ['X']
    },
    {
        command: notebook_1.CommandIDs.copy,
        selector: '.jp-Notebook.jp-mod-commandMode:focus',
        keys: ['C']
    },
    {
        command: notebook_1.CommandIDs.paste,
        selector: '.jp-Notebook.jp-mod-commandMode:focus',
        keys: ['V']
    },
    {
        command: notebook_1.CommandIDs.insertAbove,
        selector: '.jp-Notebook.jp-mod-commandMode:focus',
        keys: ['A']
    },
    {
        command: notebook_1.CommandIDs.insertBelow,
        selector: '.jp-Notebook.jp-mod-commandMode:focus',
        keys: ['B']
    },
    {
        command: notebook_1.CommandIDs.toggleLines,
        selector: '.jp-Notebook.jp-mod-commandMode:focus',
        keys: ['L']
    },
    {
        command: notebook_1.CommandIDs.markdown1,
        selector: '.jp-Notebook.jp-mod-commandMode:focus',
        keys: ['1']
    },
    {
        command: notebook_1.CommandIDs.markdown2,
        selector: '.jp-Notebook.jp-mod-commandMode:focus',
        keys: ['2']
    },
    {
        command: notebook_1.CommandIDs.markdown3,
        selector: '.jp-Notebook.jp-mod-commandMode:focus',
        keys: ['3']
    },
    {
        command: notebook_1.CommandIDs.markdown4,
        selector: '.jp-Notebook.jp-mod-commandMode:focus',
        keys: ['4']
    },
    {
        command: notebook_1.CommandIDs.markdown5,
        selector: '.jp-Notebook.jp-mod-commandMode:focus',
        keys: ['5']
    },
    {
        command: notebook_1.CommandIDs.markdown6,
        selector: '.jp-Notebook.jp-mod-commandMode:focus',
        keys: ['6']
    },
    {
        command: notebook_1.CommandIDs.editMode,
        selector: '.jp-Notebook.jp-mod-commandMode:focus',
        keys: ['Enter']
    },
    {
        command: notebook_1.CommandIDs.commandMode,
        selector: '.jp-Notebook.jp-mod-editMode',
        keys: ['Escape']
    },
    {
        command: notebook_1.CommandIDs.commandMode,
        selector: '.jp-Notebook.jp-mod-editMode',
        keys: ['Ctrl M']
    },
    {
        command: tooltip_1.CommandIDs.launchNotebook,
        selector: '.jp-Notebook',
        keys: ['Shift Tab']
    },
    {
        command: tooltip_1.CommandIDs.launchConsole,
        selector: '.jp-ConsolePanel',
        keys: ['Shift Tab']
    }
];
/**
 * The default shortcuts extension.
 */
var plugin = {
    id: 'jupyter.extensions.shortcuts',
    activate: function (app) {
        SHORTCUTS.forEach(function (shortcut) { app.commands.addKeyBinding(shortcut); });
    },
    autoStart: true
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Export the plugin as default.
 */
exports.default = plugin;
//# sourceMappingURL=plugin.js.map