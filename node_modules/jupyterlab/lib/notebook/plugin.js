// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
"use strict";
var widgets_1 = require("@phosphor/widgets");
var clipboard_1 = require("../clipboard");
var codeeditor_1 = require("../codeeditor");
var commandpalette_1 = require("../commandpalette");
var mainmenu_1 = require("../mainmenu");
var docregistry_1 = require("../docregistry");
var filebrowser_1 = require("../filebrowser");
var instancerestorer_1 = require("../instancerestorer");
var rendermime_1 = require("../rendermime");
var services_1 = require("../services");
var dialog_1 = require("../common/dialog");
var _1 = require("./");
/**
 * The class name for all main area portrait tab icons.
 */
var PORTRAIT_ICON_CLASS = 'jp-MainAreaPortraitIcon';
/**
 * The class name for the notebook icon from the default theme.
 */
var NOTEBOOK_ICON_CLASS = 'jp-ImageNotebook';
/**
 * The name of the factory that creates notebooks.
 */
var FACTORY = 'Notebook';
/**
 * The notebook widget tracker provider.
 */
exports.trackerPlugin = {
    id: 'jupyter.services.notebook-tracker',
    provides: _1.INotebookTracker,
    requires: [
        docregistry_1.IDocumentRegistry,
        services_1.IServiceManager,
        rendermime_1.IRenderMime,
        clipboard_1.IClipboard,
        mainmenu_1.IMainMenu,
        commandpalette_1.ICommandPalette,
        _1.NotebookPanel.IContentFactory,
        codeeditor_1.IEditorServices,
        instancerestorer_1.IInstanceRestorer
    ],
    activate: activateNotebookHandler,
    autoStart: true
};
/**
 * The notebook cell factory provider.
 */
exports.contentFactoryPlugin = {
    id: 'jupyter.services.notebook-renderer',
    provides: _1.NotebookPanel.IContentFactory,
    requires: [codeeditor_1.IEditorServices],
    autoStart: true,
    activate: function (app, editorServices) {
        var editorFactory = editorServices.factoryService.newInlineEditor;
        return new _1.NotebookPanel.ContentFactory({ editorFactory: editorFactory });
    }
};
/**
 * The cell tools extension.
 */
var cellToolsPlugin = {
    activate: activateCellTools,
    provides: _1.ICellTools,
    id: 'jupyter.extensions.cell-tools',
    autoStart: true,
    requires: [instancerestorer_1.IInstanceRestorer, _1.INotebookTracker, codeeditor_1.IEditorServices]
};
/**
 * Export the plugins as default.
 */
var plugins = [exports.contentFactoryPlugin, exports.trackerPlugin, cellToolsPlugin];
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = plugins;
/**
 * Activate the cell tools extension.
 */
function activateCellTools(app, restorer, tracker, editorServices) {
    var namespace = 'cell-tools';
    var celltools = new _1.CellTools({ tracker: tracker });
    celltools.title.label = 'Cell Tools';
    celltools.id = 'cell-tools';
    var activeCellTool = new _1.CellTools.ActiveCellTool();
    celltools.addItem({ tool: activeCellTool, rank: 1 });
    var slideShow = _1.CellTools.createSlideShowSelector();
    celltools.addItem({ tool: slideShow, rank: 2 });
    var nbConvert = _1.CellTools.createNBConvertSelector();
    celltools.addItem({ tool: nbConvert, rank: 3 });
    var editorFactory = editorServices.factoryService.newInlineEditor;
    var metadataEditor = new _1.CellTools.MetadataEditorTool({ editorFactory: editorFactory });
    celltools.addItem({ tool: metadataEditor, rank: 4 });
    restorer.add(celltools, namespace);
    app.shell.addToLeftArea(celltools);
    return Promise.resolve(celltools);
}
/**
 * Activate the notebook handler extension.
 */
function activateNotebookHandler(app, registry, services, rendermime, clipboard, mainMenu, palette, contentFactory, editorServices, restorer) {
    var factory = new _1.NotebookWidgetFactory({
        name: FACTORY,
        fileExtensions: ['.ipynb'],
        modelName: 'notebook',
        defaultFor: ['.ipynb'],
        preferKernel: true,
        canStartKernel: true,
        rendermime: rendermime,
        clipboard: clipboard,
        contentFactory: contentFactory,
        mimeTypeService: editorServices.mimeTypeService
    });
    var tracker = new _1.NotebookTracker({ namespace: 'notebook' });
    // Handle state restoration.
    restorer.restore(tracker, {
        command: filebrowser_1.CommandIDs.open,
        args: function (panel) { return ({ path: panel.context.path, factory: FACTORY }); },
        name: function (panel) { return panel.context.path; },
        when: services.ready
    });
    registry.addModelFactory(new _1.NotebookModelFactory({}));
    registry.addWidgetFactory(factory);
    registry.addFileType({
        name: 'Notebook',
        extension: '.ipynb',
        contentType: 'notebook',
        fileFormat: 'json'
    });
    registry.addCreator({
        name: 'Notebook',
        fileType: 'Notebook',
        widgetName: 'Notebook'
    });
    addCommands(app, services, tracker);
    populatePalette(palette);
    var id = 0; // The ID counter for notebook panels.
    factory.widgetCreated.connect(function (sender, widget) {
        // If the notebook panel does not have an ID, assign it one.
        widget.id = widget.id || "notebook-" + ++id;
        widget.title.icon = PORTRAIT_ICON_CLASS + " " + NOTEBOOK_ICON_CLASS;
        // Notify the instance tracker if restore data needs to update.
        widget.context.pathChanged.connect(function () { tracker.save(widget); });
        // Add the notebook panel to the tracker.
        tracker.add(widget);
    });
    // Add main menu notebook menu.
    mainMenu.addMenu(createMenu(app), { rank: 20 });
    return tracker;
}
/**
 * Add the notebook commands to the application's command registry.
 */
function addCommands(app, services, tracker) {
    var commands = app.commands, shell = app.shell;
    // Get the current widget and activate unless the args specify otherwise.
    function getCurrent(args) {
        var widget = tracker.currentWidget;
        var activate = !args || args && args['activate'] !== false;
        if (activate && widget) {
            shell.activateMain(widget.id);
        }
        return widget;
    }
    commands.addCommand(_1.CommandIDs.runAndAdvance, {
        label: 'Run Cell(s) and Advance',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            var content = current.notebook;
            return _1.NotebookActions.runAndAdvance(content, current.context.kernel);
        }
    });
    commands.addCommand(_1.CommandIDs.run, {
        label: 'Run Cell(s)',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            return _1.NotebookActions.run(current.notebook, current.context.kernel);
        }
    });
    commands.addCommand(_1.CommandIDs.runAndInsert, {
        label: 'Run Cell(s) and Insert',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            return _1.NotebookActions.runAndInsert(current.notebook, current.context.kernel);
        }
    });
    commands.addCommand(_1.CommandIDs.runAll, {
        label: 'Run All Cells',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            return _1.NotebookActions.runAll(current.notebook, current.context.kernel);
        }
    });
    commands.addCommand(_1.CommandIDs.restart, {
        label: 'Restart Kernel',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            return docregistry_1.restartKernel(current.kernel, current.node).then(function () {
                current.activate();
            });
        }
    });
    commands.addCommand(_1.CommandIDs.closeAndShutdown, {
        label: 'Close and Shutdown',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            var fileName = current.title.label;
            return dialog_1.showDialog({
                title: 'Shutdown the notebook?',
                body: "Are you sure you want to close \"" + fileName + "\"?",
                buttons: [dialog_1.cancelButton, dialog_1.warnButton]
            }).then(function (result) {
                if (result.text === 'OK') {
                    current.context.changeKernel(null).then(function () { current.dispose(); });
                }
                else {
                    return false;
                }
            });
        }
    });
    commands.addCommand(_1.CommandIDs.trust, {
        label: 'Trust Notebook',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            return _1.trustNotebook(current.context.model).then(function () {
                return current.context.save();
            });
        }
    });
    commands.addCommand(_1.CommandIDs.restartClear, {
        label: 'Restart Kernel & Clear Outputs',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            var promise = docregistry_1.restartKernel(current.kernel, current.node);
            promise.then(function (result) {
                current.activate();
                if (result) {
                    return _1.NotebookActions.clearAllOutputs(current.notebook);
                }
            });
            return promise;
        }
    });
    commands.addCommand(_1.CommandIDs.restartRunAll, {
        label: 'Restart Kernel & Run All',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            var promise = docregistry_1.restartKernel(current.kernel, current.node);
            promise.then(function (result) {
                current.activate();
                _1.NotebookActions.runAll(current.notebook, current.context.kernel);
            });
            return promise;
        }
    });
    commands.addCommand(_1.CommandIDs.clearAllOutputs, {
        label: 'Clear All Outputs',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            return _1.NotebookActions.clearAllOutputs(current.notebook);
        }
    });
    commands.addCommand(_1.CommandIDs.clearOutputs, {
        label: 'Clear Output(s)',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            return _1.NotebookActions.clearOutputs(current.notebook);
        }
    });
    commands.addCommand(_1.CommandIDs.interrupt, {
        label: 'Interrupt Kernel',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            var kernel = current.context.kernel;
            if (kernel) {
                return kernel.interrupt();
            }
        }
    });
    commands.addCommand(_1.CommandIDs.toCode, {
        label: 'Convert to Code',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            return _1.NotebookActions.changeCellType(current.notebook, 'code');
        }
    });
    commands.addCommand(_1.CommandIDs.toMarkdown, {
        label: 'Convert to Markdown',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            return _1.NotebookActions.changeCellType(current.notebook, 'markdown');
        }
    });
    commands.addCommand(_1.CommandIDs.toRaw, {
        label: 'Convert to Raw',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            return _1.NotebookActions.changeCellType(current.notebook, 'raw');
        }
    });
    commands.addCommand(_1.CommandIDs.cut, {
        label: 'Cut Cell(s)',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            return _1.NotebookActions.cut(current.notebook, current.clipboard);
        }
    });
    commands.addCommand(_1.CommandIDs.copy, {
        label: 'Copy Cell(s)',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            return _1.NotebookActions.copy(current.notebook, current.clipboard);
        }
    });
    commands.addCommand(_1.CommandIDs.paste, {
        label: 'Paste Cell(s)',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            return _1.NotebookActions.paste(current.notebook, current.clipboard);
        }
    });
    commands.addCommand(_1.CommandIDs.deleteCell, {
        label: 'Delete Cell(s)',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            return _1.NotebookActions.deleteCells(current.notebook);
        }
    });
    commands.addCommand(_1.CommandIDs.split, {
        label: 'Split Cell',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            return _1.NotebookActions.splitCell(current.notebook);
        }
    });
    commands.addCommand(_1.CommandIDs.merge, {
        label: 'Merge Selected Cell(s)',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            return _1.NotebookActions.mergeCells(current.notebook);
        }
    });
    commands.addCommand(_1.CommandIDs.insertAbove, {
        label: 'Insert Cell Above',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            return _1.NotebookActions.insertAbove(current.notebook);
        }
    });
    commands.addCommand(_1.CommandIDs.insertBelow, {
        label: 'Insert Cell Below',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            return _1.NotebookActions.insertBelow(current.notebook);
        }
    });
    commands.addCommand(_1.CommandIDs.selectAbove, {
        label: 'Select Cell Above',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            return _1.NotebookActions.selectAbove(current.notebook);
        }
    });
    commands.addCommand(_1.CommandIDs.selectBelow, {
        label: 'Select Cell Below',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            return _1.NotebookActions.selectBelow(current.notebook);
        }
    });
    commands.addCommand(_1.CommandIDs.extendAbove, {
        label: 'Extend Selection Above',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            return _1.NotebookActions.extendSelectionAbove(current.notebook);
        }
    });
    commands.addCommand(_1.CommandIDs.extendBelow, {
        label: 'Extend Selection Below',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            return _1.NotebookActions.extendSelectionBelow(current.notebook);
        }
    });
    commands.addCommand(_1.CommandIDs.moveUp, {
        label: 'Move Cell(s) Up',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            return _1.NotebookActions.moveUp(current.notebook);
        }
    });
    commands.addCommand(_1.CommandIDs.moveDown, {
        label: 'Move Cell(s) Down',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            return _1.NotebookActions.moveDown(current.notebook);
        }
    });
    commands.addCommand(_1.CommandIDs.toggleLines, {
        label: 'Toggle Line Numbers',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            return _1.NotebookActions.toggleLineNumbers(current.notebook);
        }
    });
    commands.addCommand(_1.CommandIDs.toggleAllLines, {
        label: 'Toggle All Line Numbers',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            return _1.NotebookActions.toggleAllLineNumbers(current.notebook);
        }
    });
    commands.addCommand(_1.CommandIDs.commandMode, {
        label: 'To Command Mode',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            return current.notebook.mode = 'command';
        }
    });
    commands.addCommand(_1.CommandIDs.editMode, {
        label: 'To Edit Mode',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            current.notebook.mode = 'edit';
        }
    });
    commands.addCommand(_1.CommandIDs.undo, {
        label: 'Undo Cell Operation',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            return _1.NotebookActions.undo(current.notebook);
        }
    });
    commands.addCommand(_1.CommandIDs.redo, {
        label: 'Redo Cell Operation',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            return _1.NotebookActions.redo(current.notebook);
        }
    });
    commands.addCommand(_1.CommandIDs.switchKernel, {
        label: 'Switch Kernel',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            var context = current.context;
            var node = current.node;
            var sessions = services.sessions;
            return docregistry_1.selectKernelForContext(context, sessions, node).then(function () {
                current.activate();
            });
        }
    });
    commands.addCommand(_1.CommandIDs.markdown1, {
        label: 'Markdown Header 1',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            return _1.NotebookActions.setMarkdownHeader(current.notebook, 1);
        }
    });
    commands.addCommand(_1.CommandIDs.markdown2, {
        label: 'Markdown Header 2',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            return _1.NotebookActions.setMarkdownHeader(current.notebook, 2);
        }
    });
    commands.addCommand(_1.CommandIDs.markdown3, {
        label: 'Markdown Header 3',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            return _1.NotebookActions.setMarkdownHeader(current.notebook, 3);
        }
    });
    commands.addCommand(_1.CommandIDs.markdown4, {
        label: 'Markdown Header 4',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            return _1.NotebookActions.setMarkdownHeader(current.notebook, 4);
        }
    });
    commands.addCommand(_1.CommandIDs.markdown5, {
        label: 'Markdown Header 5',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            return _1.NotebookActions.setMarkdownHeader(current.notebook, 5);
        }
    });
    commands.addCommand(_1.CommandIDs.markdown6, {
        label: 'Markdown Header 6',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            return _1.NotebookActions.setMarkdownHeader(current.notebook, 6);
        }
    });
}
/**
 * Populate the application's command palette with notebook commands.
 */
function populatePalette(palette) {
    var category = 'Notebook Operations';
    [
        _1.CommandIDs.interrupt,
        _1.CommandIDs.restart,
        _1.CommandIDs.restartClear,
        _1.CommandIDs.restartRunAll,
        _1.CommandIDs.runAll,
        _1.CommandIDs.clearAllOutputs,
        _1.CommandIDs.toggleAllLines,
        _1.CommandIDs.editMode,
        _1.CommandIDs.commandMode,
        _1.CommandIDs.switchKernel,
        _1.CommandIDs.closeAndShutdown,
        _1.CommandIDs.trust
    ].forEach(function (command) { palette.addItem({ command: command, category: category }); });
    category = 'Notebook Cell Operations';
    [
        _1.CommandIDs.run,
        _1.CommandIDs.runAndAdvance,
        _1.CommandIDs.runAndInsert,
        _1.CommandIDs.clearOutputs,
        _1.CommandIDs.toCode,
        _1.CommandIDs.toMarkdown,
        _1.CommandIDs.toRaw,
        _1.CommandIDs.cut,
        _1.CommandIDs.copy,
        _1.CommandIDs.paste,
        _1.CommandIDs.deleteCell,
        _1.CommandIDs.split,
        _1.CommandIDs.merge,
        _1.CommandIDs.insertAbove,
        _1.CommandIDs.insertBelow,
        _1.CommandIDs.selectAbove,
        _1.CommandIDs.selectBelow,
        _1.CommandIDs.extendAbove,
        _1.CommandIDs.extendBelow,
        _1.CommandIDs.moveDown,
        _1.CommandIDs.moveUp,
        _1.CommandIDs.toggleLines,
        _1.CommandIDs.undo,
        _1.CommandIDs.redo,
        _1.CommandIDs.markdown1,
        _1.CommandIDs.markdown2,
        _1.CommandIDs.markdown3,
        _1.CommandIDs.markdown4,
        _1.CommandIDs.markdown5,
        _1.CommandIDs.markdown6
    ].forEach(function (command) { palette.addItem({ command: command, category: category }); });
}
/**
 * Creates a menu for the notebook.
 */
function createMenu(app) {
    var commands = app.commands;
    var menu = new widgets_1.Menu({ commands: commands });
    var settings = new widgets_1.Menu({ commands: commands });
    menu.title.label = 'Notebook';
    settings.title.label = 'Settings';
    settings.addItem({ command: _1.CommandIDs.toggleAllLines });
    menu.addItem({ command: _1.CommandIDs.undo });
    menu.addItem({ command: _1.CommandIDs.redo });
    menu.addItem({ type: 'separator' });
    menu.addItem({ command: _1.CommandIDs.cut });
    menu.addItem({ command: _1.CommandIDs.copy });
    menu.addItem({ command: _1.CommandIDs.paste });
    menu.addItem({ command: _1.CommandIDs.deleteCell });
    menu.addItem({ type: 'separator' });
    menu.addItem({ command: _1.CommandIDs.split });
    menu.addItem({ command: _1.CommandIDs.merge });
    menu.addItem({ type: 'separator' });
    menu.addItem({ command: _1.CommandIDs.clearAllOutputs });
    menu.addItem({ type: 'separator' });
    menu.addItem({ command: _1.CommandIDs.runAll });
    menu.addItem({ command: _1.CommandIDs.interrupt });
    menu.addItem({ command: _1.CommandIDs.restart });
    menu.addItem({ command: _1.CommandIDs.switchKernel });
    menu.addItem({ type: 'separator' });
    menu.addItem({ command: _1.CommandIDs.closeAndShutdown });
    menu.addItem({ command: _1.CommandIDs.trust });
    menu.addItem({ type: 'separator' });
    menu.addItem({ type: 'submenu', submenu: settings });
    return menu;
}
//# sourceMappingURL=plugin.js.map