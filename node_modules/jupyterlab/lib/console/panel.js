// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var application_1 = require("@phosphor/application");
var widgets_1 = require("@phosphor/widgets");
var widget_1 = require("./widget");
/**
 * The class name added to console panels.
 */
var PANEL_CLASS = 'jp-ConsolePanel';
/**
 * A panel which contains a console and the ability to add other children.
 */
var ConsolePanel = (function (_super) {
    __extends(ConsolePanel, _super);
    /**
     * Construct a console panel.
     */
    function ConsolePanel(options) {
        var _this = _super.call(this) || this;
        _this.addClass(PANEL_CLASS);
        var factory = options.contentFactory;
        var rendermime = options.rendermime, session = options.session, mimeTypeService = options.mimeTypeService;
        var contentFactory = factory.consoleContentFactory;
        var modelFactory = options.modelFactory;
        var consoleOpts = {
            rendermime: rendermime, session: session, mimeTypeService: mimeTypeService, contentFactory: contentFactory, modelFactory: modelFactory
        };
        _this.console = factory.createConsole(consoleOpts);
        _this.addWidget(_this.console);
        return _this;
    }
    /**
     * Dispose of the resources held by the widget.
     */
    ConsolePanel.prototype.dispose = function () {
        this.console.dispose();
        _super.prototype.dispose.call(this);
    };
    /**
     * Handle `'activate-request'` messages.
     */
    ConsolePanel.prototype.onActivateRequest = function (msg) {
        this.console.prompt.editor.focus();
    };
    /**
     * Handle `'close-request'` messages.
     */
    ConsolePanel.prototype.onCloseRequest = function (msg) {
        _super.prototype.onCloseRequest.call(this, msg);
        this.dispose();
    };
    return ConsolePanel;
}(widgets_1.Panel));
exports.ConsolePanel = ConsolePanel;
/**
 * A namespace for ConsolePanel statics.
 */
(function (ConsolePanel) {
    /**
     * Default implementation of `IContentFactory`.
     */
    var ContentFactory = (function () {
        /**
         * Create a new content factory.
         */
        function ContentFactory(options) {
            this.editorFactory = options.editorFactory;
            this.consoleContentFactory = (options.consoleContentFactory ||
                new widget_1.CodeConsole.ContentFactory({
                    editorFactory: this.editorFactory,
                    outputAreaContentFactory: options.outputAreaContentFactory,
                    codeCellContentFactory: options.codeCellContentFactory,
                    rawCellContentFactory: options.rawCellContentFactory
                }));
        }
        /**
         * Create a new console panel.
         */
        ContentFactory.prototype.createConsole = function (options) {
            return new widget_1.CodeConsole(options);
        };
        return ContentFactory;
    }());
    ConsolePanel.ContentFactory = ContentFactory;
    /* tslint:disable */
    /**
     * The console renderer token.
     */
    ConsolePanel.IContentFactory = new application_1.Token('jupyter.services.console.content-factory');
    /* tslint:enable */
})(ConsolePanel = exports.ConsolePanel || (exports.ConsolePanel = {}));
exports.ConsolePanel = ConsolePanel;
//# sourceMappingURL=panel.js.map