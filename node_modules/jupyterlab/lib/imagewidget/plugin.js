// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
"use strict";
var commandpalette_1 = require("../commandpalette");
var instancetracker_1 = require("../common/instancetracker");
var docregistry_1 = require("../docregistry");
var filebrowser_1 = require("../filebrowser");
var instancerestorer_1 = require("../instancerestorer");
var _1 = require("./");
/**
 * The list of file extensions for images.
 */
var EXTENSIONS = ['.png', '.gif', '.jpeg', '.jpg', '.svg', '.bmp', '.ico',
    '.xbm', '.tiff', '.tif'];
/**
 * The name of the factory that creates image widgets.
 */
var FACTORY = 'Image';
/**
 * The image file handler extension.
 */
var plugin = {
    activate: activate,
    id: 'jupyter.extensions.image-handler',
    requires: [docregistry_1.IDocumentRegistry, commandpalette_1.ICommandPalette, instancerestorer_1.IInstanceRestorer],
    autoStart: true
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Export the plugin as default.
 */
exports.default = plugin;
/**
 * Activate the image widget extension.
 */
function activate(app, registry, palette, restorer) {
    var namespace = 'image-widget';
    var factory = new _1.ImageWidgetFactory({
        name: FACTORY,
        modelName: 'base64',
        fileExtensions: EXTENSIONS,
        defaultFor: EXTENSIONS
    });
    var tracker = new instancetracker_1.InstanceTracker({ namespace: namespace });
    // Handle state restoration.
    restorer.restore(tracker, {
        command: filebrowser_1.CommandIDs.open,
        args: function (widget) { return ({ path: widget.context.path, factory: FACTORY }); },
        name: function (widget) { return widget.context.path; }
    });
    registry.addWidgetFactory(factory);
    factory.widgetCreated.connect(function (sender, widget) {
        // Notify the instance tracker if restore data needs to update.
        widget.context.pathChanged.connect(function () { tracker.save(widget); });
        tracker.add(widget);
    });
    app.commands.addCommand(_1.CommandIDs.zoomIn, {
        execute: zoomIn,
        label: 'Zoom In'
    });
    app.commands.addCommand(_1.CommandIDs.zoomOut, {
        execute: zoomOut,
        label: 'Zoom Out'
    });
    app.commands.addCommand(_1.CommandIDs.resetZoom, {
        execute: resetZoom,
        label: 'Reset Zoom'
    });
    var category = 'Image Widget';
    [_1.CommandIDs.zoomIn, _1.CommandIDs.zoomOut, _1.CommandIDs.resetZoom]
        .forEach(function (command) { return palette.addItem({ command: command, category: category }); });
    function zoomIn() {
        var widget = tracker.currentWidget;
        if (!widget) {
            return;
        }
        if (widget.scale > 1) {
            widget.scale += .5;
        }
        else {
            widget.scale *= 2;
        }
    }
    function zoomOut() {
        var widget = tracker.currentWidget;
        if (!widget) {
            return;
        }
        if (widget.scale > 1) {
            widget.scale -= .5;
        }
        else {
            widget.scale /= 2;
        }
    }
    function resetZoom() {
        var widget = tracker.currentWidget;
        if (!widget) {
            return;
        }
        widget.scale = 1;
    }
}
//# sourceMappingURL=plugin.js.map