// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
"use strict";
var services_1 = require("@jupyterlab/services");
var widgets_1 = require("@phosphor/widgets");
var codeeditor_1 = require("../codeeditor");
var commandpalette_1 = require("../commandpalette");
var dates_1 = require("../common/dates");
var dialog_1 = require("../common/dialog");
var instancetracker_1 = require("../common/instancetracker");
var docregistry_1 = require("../docregistry");
var filebrowser_1 = require("../filebrowser");
var instancerestorer_1 = require("../instancerestorer");
var mainmenu_1 = require("../mainmenu");
var rendermime_1 = require("../rendermime");
var services_2 = require("../services");
var index_1 = require("./index");
/**
 * The console widget tracker provider.
 */
exports.trackerPlugin = {
    id: 'jupyter.services.console-tracker',
    provides: index_1.IConsoleTracker,
    requires: [
        services_2.IServiceManager,
        rendermime_1.IRenderMime,
        mainmenu_1.IMainMenu,
        commandpalette_1.ICommandPalette,
        filebrowser_1.IPathTracker,
        index_1.ConsolePanel.IContentFactory,
        codeeditor_1.IEditorServices,
        instancerestorer_1.IInstanceRestorer
    ],
    activate: activateConsole,
    autoStart: true
};
/**
 * The console widget content factory.
 */
exports.contentFactoryPlugin = {
    id: 'jupyter.services.console-renderer',
    provides: index_1.ConsolePanel.IContentFactory,
    requires: [codeeditor_1.IEditorServices],
    autoStart: true,
    activate: function (app, editorServices) {
        var editorFactory = editorServices.factoryService.newInlineEditor;
        return new index_1.ConsolePanel.ContentFactory({ editorFactory: editorFactory });
    }
};
/**
 * Export the plugins as the default.
 */
var plugins = [exports.contentFactoryPlugin, exports.trackerPlugin];
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = plugins;
/**
 * The class name for all main area landscape tab icons.
 */
var LANDSCAPE_ICON_CLASS = 'jp-MainAreaLandscapeIcon';
/**
 * The class name for the console icon from the default theme.
 */
var CONSOLE_ICON_CLASS = 'jp-ImageCodeConsole';
/**
 * A regex for console names.
 */
var CONSOLE_REGEX = /^console-(\d)+-[0-9a-f]+$/;
/**
 * Activate the console extension.
 */
function activateConsole(app, services, rendermime, mainMenu, palette, pathTracker, contentFactory, editorServices, restorer) {
    var manager = services.sessions;
    var commands = app.commands, shell = app.shell;
    var category = 'Console';
    var command;
    var count = 0;
    var menu = new widgets_1.Menu({ commands: commands });
    // Create an instance tracker for all console panels.
    var tracker = new instancetracker_1.InstanceTracker({ namespace: 'console' });
    // Handle state restoration.
    restorer.restore(tracker, {
        command: index_1.CommandIDs.create,
        args: function (panel) { return ({ id: panel.console.session.id }); },
        name: function (panel) { return panel.console.session && panel.console.session.id; },
        when: manager.ready
    });
    // Set the main menu title.
    menu.title.label = category;
    command = index_1.CommandIDs.create;
    commands.addCommand(command, {
        label: 'Start New Console',
        execute: function (args) {
            var name = "Console " + ++count;
            args = args || {};
            // If we get a session, use it.
            if (args.id) {
                return manager.ready.then(function () { return manager.connectTo(args.id); })
                    .then(function (session) {
                    name = session.path.split('/').pop();
                    name = "Console " + name.match(CONSOLE_REGEX)[1];
                    createConsole(session, name);
                    return session.id;
                });
            }
            // Find the correct path for the new session.
            // Use the given path or the cwd.
            var path = args.path || pathTracker.path;
            if (services_1.ContentsManager.extname(path)) {
                path = services_1.ContentsManager.dirname(path);
            }
            path = path + "/console-" + count + "-" + services_1.utils.uuid();
            // Get the kernel model.
            return manager.ready.then(function () { return getKernel(args, name); }).then(function (kernel) {
                if (!kernel || (kernel && !kernel.id && !kernel.name)) {
                    return;
                }
                // Start the session.
                var options = {
                    path: path,
                    kernelName: kernel.name,
                    kernelId: kernel.id
                };
                return manager.startNew(options).then(function (session) {
                    createConsole(session, name);
                    return session.id;
                });
            });
        }
    });
    palette.addItem({ command: command, category: category });
    // Get the current widget and activate unless the args specify otherwise.
    function getCurrent(args) {
        var widget = tracker.currentWidget;
        var activate = !args || args && args['activate'] !== false;
        if (activate && widget) {
            shell.activateMain(widget.id);
        }
        return widget;
    }
    command = index_1.CommandIDs.clear;
    commands.addCommand(command, {
        label: 'Clear Cells',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            current.console.clear();
        }
    });
    palette.addItem({ command: command, category: category });
    command = index_1.CommandIDs.run;
    commands.addCommand(command, {
        label: 'Run Cell',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            current.console.execute();
        }
    });
    palette.addItem({ command: command, category: category });
    command = index_1.CommandIDs.runForced;
    commands.addCommand(command, {
        label: 'Run Cell (forced)',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            current.console.execute(true);
        }
    });
    palette.addItem({ command: command, category: category });
    command = index_1.CommandIDs.linebreak;
    commands.addCommand(command, {
        label: 'Insert Line Break',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            current.console.insertLinebreak();
        }
    });
    palette.addItem({ command: command, category: category });
    command = index_1.CommandIDs.interrupt;
    commands.addCommand(command, {
        label: 'Interrupt Kernel',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            var kernel = current.console.session.kernel;
            if (kernel) {
                return kernel.interrupt();
            }
        }
    });
    palette.addItem({ command: command, category: category });
    command = index_1.CommandIDs.restart;
    commands.addCommand(command, {
        label: 'Restart Kernel',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            var kernel = current.console.session.kernel;
            if (kernel) {
                return kernel.restart();
            }
        }
    });
    palette.addItem({ command: command, category: category });
    command = index_1.CommandIDs.closeAndShutdown;
    commands.addCommand(command, {
        label: 'Close and Shutdown',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            return dialog_1.showDialog({
                title: 'Shutdown the console?',
                body: "Are you sure you want to close \"" + current.title.label + "\"?",
                buttons: [dialog_1.cancelButton, dialog_1.warnButton]
            }).then(function (result) {
                if (result.text === 'OK') {
                    current.console.session.shutdown().then(function () {
                        current.dispose();
                    });
                }
                else {
                    return false;
                }
            });
        }
    });
    command = index_1.CommandIDs.inject;
    commands.addCommand(command, {
        execute: function (args) {
            var id = args['id'];
            tracker.find(function (widget) {
                if (widget.console.session.id === id) {
                    if (args['activate'] !== false) {
                        shell.activateMain(widget.id);
                    }
                    widget.console.inject(args['code']);
                    return true;
                }
            });
        }
    });
    command = index_1.CommandIDs.open;
    commands.addCommand(command, {
        execute: function (args) {
            var id = args['id'];
            var widget = tracker.find(function (value) {
                if (value.console.session.id === id) {
                    return true;
                }
            });
            if (widget) {
                shell.activateMain(widget.id);
            }
            else {
                app.commands.execute(index_1.CommandIDs.create, { id: id });
            }
        }
    });
    /**
     * Get the kernel given the create args.
     */
    function getKernel(args, name) {
        if (args.kernel) {
            return Promise.resolve(args.kernel);
        }
        return manager.ready.then(function () {
            var options = {
                name: name,
                specs: manager.specs,
                sessions: manager.running(),
                preferredLanguage: args.preferredLanguage || '',
                host: document.body
            };
            return docregistry_1.selectKernel(options);
        });
    }
    var id = 0; // The ID counter for notebook panels.
    /**
     * Create a console for a given session.
     *
     * #### Notes
     * The manager must be ready before calling this function.
     */
    function createConsole(session, name) {
        var options = {
            rendermime: rendermime.clone(),
            session: session,
            contentFactory: contentFactory,
            mimeTypeService: editorServices.mimeTypeService
        };
        var panel = new index_1.ConsolePanel(options);
        var resolver = new rendermime_1.RenderMime.UrlResolver({
            session: session,
            contents: services.contents
        });
        panel.console.rendermime.resolver = resolver;
        var specs = manager.specs;
        var displayName = specs.kernelspecs[session.kernel.name].display_name;
        var captionOptions = {
            label: name,
            displayName: displayName,
            path: session.path,
            connected: new Date()
        };
        // If the console panel does not have an ID, assign it one.
        panel.id = panel.id || "console-" + ++id;
        panel.title.label = name;
        panel.title.caption = Private.caption(captionOptions);
        panel.title.icon = LANDSCAPE_ICON_CLASS + " " + CONSOLE_ICON_CLASS;
        panel.title.closable = true;
        // Update the caption of the tab with the last execution time.
        panel.console.executed.connect(function (sender, executed) {
            captionOptions.executed = executed;
            panel.title.caption = Private.caption(captionOptions);
        });
        // Update the caption of the tab when the kernel changes.
        panel.console.session.kernelChanged.connect(function () {
            var newName = panel.console.session.kernel.name;
            name = specs.kernelspecs[newName].display_name;
            captionOptions.displayName = name;
            captionOptions.connected = new Date();
            captionOptions.executed = null;
            panel.title.caption = Private.caption(captionOptions);
        });
        // Add the console panel to the tracker.
        tracker.add(panel);
        shell.addToMainArea(panel);
        shell.activateMain(panel.id);
    }
    command = index_1.CommandIDs.switchKernel;
    commands.addCommand(command, {
        label: 'Switch Kernel',
        execute: function (args) {
            var current = getCurrent(args);
            if (!current) {
                return;
            }
            var widget = current.console;
            var session = widget.session;
            var lang = '';
            manager.ready.then(function () {
                var specs = manager.specs;
                if (session.kernel) {
                    lang = specs.kernelspecs[session.kernel.name].language;
                }
                var options = {
                    name: widget.parent.title.label,
                    specs: specs,
                    sessions: manager.running(),
                    preferredLanguage: lang,
                    kernel: session.kernel.model,
                    host: widget.parent.node
                };
                return docregistry_1.selectKernel(options);
            }).then(function (kernelId) {
                // If the user cancels, kernelId will be void and should be ignored.
                if (kernelId) {
                    return session.changeKernel(kernelId);
                }
            });
        }
    });
    palette.addItem({ command: command, category: category });
    menu.addItem({ command: index_1.CommandIDs.run });
    menu.addItem({ command: index_1.CommandIDs.runForced });
    menu.addItem({ command: index_1.CommandIDs.linebreak });
    menu.addItem({ type: 'separator' });
    menu.addItem({ command: index_1.CommandIDs.clear });
    menu.addItem({ type: 'separator' });
    menu.addItem({ command: index_1.CommandIDs.interrupt });
    menu.addItem({ command: index_1.CommandIDs.restart });
    menu.addItem({ command: index_1.CommandIDs.switchKernel });
    menu.addItem({ type: 'separator' });
    menu.addItem({ command: index_1.CommandIDs.closeAndShutdown });
    mainMenu.addMenu(menu, { rank: 50 });
    return tracker;
}
/**
 * A namespace for private data.
 */
var Private;
(function (Private) {
    /**
     * Generate a caption for a console's title.
     */
    function caption(options) {
        var label = options.label, path = options.path, displayName = options.displayName, connected = options.connected, executed = options.executed;
        var caption = ("Name: " + label + "\n" +
            ("Directory: " + services_1.ContentsManager.dirname(path) + "\n") +
            ("Kernel: " + displayName + "\n") +
            ("Connected: " + dates_1.dateTime(connected.toISOString())));
        if (executed) {
            caption += "\nLast Execution: " + dates_1.dateTime(executed.toISOString());
        }
        return caption;
    }
    Private.caption = caption;
})(Private || (Private = {}));
//# sourceMappingURL=plugin.js.map