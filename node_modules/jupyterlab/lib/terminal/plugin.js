// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
"use strict";
var instancetracker_1 = require("../common/instancetracker");
var widgets_1 = require("@phosphor/widgets");
var commandpalette_1 = require("../commandpalette");
var instancerestorer_1 = require("../instancerestorer");
var mainmenu_1 = require("../mainmenu");
var services_1 = require("../services");
var _1 = require("./");
/**
 * The class name for all main area landscape tab icons.
 */
var LANDSCAPE_ICON_CLASS = 'jp-MainAreaLandscapeIcon';
/**
 * The class name for the terminal icon in the default theme.
 */
var TERMINAL_ICON_CLASS = 'jp-ImageTerminal';
/**
 * The default terminal extension.
 */
var plugin = {
    activate: activate,
    id: 'jupyter.extensions.terminal',
    requires: [
        services_1.IServiceManager, mainmenu_1.IMainMenu, commandpalette_1.ICommandPalette, instancerestorer_1.IInstanceRestorer
    ],
    autoStart: true
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Export the plugin as default.
 */
exports.default = plugin;
/**
 * Activate the terminal plugin.
 */
function activate(app, services, mainMenu, palette, restorer) {
    // Bail if there are no terminals available.
    if (!services.terminals.isAvailable()) {
        console.log('Disabling terminals plugin because they are not available on the server');
        return;
    }
    var category = 'Terminal';
    var namespace = 'terminal';
    var tracker = new instancetracker_1.InstanceTracker({ namespace: namespace });
    var commands = app.commands;
    var options = {
        background: 'black',
        color: 'white',
        fontSize: 13
    };
    // Handle state restoration.
    restorer.restore(tracker, {
        command: _1.CommandIDs.createNew,
        args: function (widget) { return ({ name: widget.session.name }); },
        name: function (widget) { return widget.session && widget.session.name; }
    });
    // Add terminal commands.
    commands.addCommand(_1.CommandIDs.createNew, {
        label: 'New Terminal',
        caption: 'Start a new terminal session',
        execute: function (args) {
            var name = args ? args['name'] : '';
            var promise;
            if (name) {
                promise = services.terminals.connectTo(name);
            }
            else {
                promise = services.terminals.startNew();
            }
            return promise.then(function (session) {
                return session.ready.then(function () {
                    var term = new _1.TerminalWidget(options);
                    term.session = session;
                    term.title.closable = true;
                    term.title.icon = LANDSCAPE_ICON_CLASS + " " + TERMINAL_ICON_CLASS;
                    tracker.add(term);
                    app.shell.addToMainArea(term);
                    app.shell.activateMain(term.id);
                });
            });
        }
    });
    commands.addCommand(_1.CommandIDs.refresh, {
        label: 'Refresh Terminal',
        caption: 'Refresh the current terminal session',
        execute: function () {
            var current = tracker.currentWidget;
            if (!current) {
                return;
            }
            app.shell.activateMain(current.id);
            return current.refresh().then(function () {
                current.activate();
            });
        }
    });
    commands.addCommand(_1.CommandIDs.increaseFont, {
        label: 'Increase Terminal Font Size',
        execute: function () {
            if (options.fontSize < 72) {
                options.fontSize++;
                tracker.forEach(function (widget) { widget.fontSize = options.fontSize; });
            }
        }
    });
    commands.addCommand(_1.CommandIDs.decreaseFont, {
        label: 'Decrease Terminal Font Size',
        execute: function () {
            if (options.fontSize > 9) {
                options.fontSize--;
                tracker.forEach(function (widget) { widget.fontSize = options.fontSize; });
            }
        }
    });
    commands.addCommand(_1.CommandIDs.toggleTheme, {
        label: 'Toggle Terminal Theme',
        caption: 'Switch Terminal Background and Font Colors',
        execute: function () {
            if (options.background === 'black') {
                options.background = 'white';
                options.color = 'black';
            }
            else {
                options.background = 'black';
                options.color = 'white';
            }
            tracker.forEach(function (widget) {
                widget.background = options.background;
                widget.color = options.color;
            });
        }
    });
    commands.addCommand(_1.CommandIDs.open, {
        execute: function (args) {
            var name = args['name'];
            // Check for a running terminal with the given name.
            var widget = tracker.find(function (value) { return value.session.name === name; });
            if (widget) {
                app.shell.activateMain(widget.id);
            }
            else {
                // Otherwise, create a new terminal with a given name.
                return commands.execute(_1.CommandIDs.createNew, { name: name });
            }
        }
    });
    // Add command palette and menu items.
    var menu = new widgets_1.Menu({ commands: commands });
    menu.title.label = category;
    [
        _1.CommandIDs.createNew,
        _1.CommandIDs.refresh,
        _1.CommandIDs.increaseFont,
        _1.CommandIDs.decreaseFont,
        _1.CommandIDs.toggleTheme
    ].forEach(function (command) {
        palette.addItem({ command: command, category: category });
        menu.addItem({ command: command });
    });
    mainMenu.addMenu(menu, { rank: 40 });
}
//# sourceMappingURL=plugin.js.map